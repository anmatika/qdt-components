/* eslint no-unused-vars: 0 */
const loadCapabilityApis = async (config) => {
  try {
    /*     console.log('loadCapabilityApis', config.host, config.port); */
    const capabilityApisJS = document.createElement('script');
    const prefix = config.prefix !== '' ? `/${config.prefix}` : '';
    capabilityApisJS.src = `${(config.secure ? 'https://' : 'http://') +
      config.host +
      (config.port ? `:${config.port}` : '') +
      prefix}/resources/assets/external/requirejs/require.js`;

    /*     console.log('loadCapabilityApis.src', capabilityApisJS.src); */
    document.head.appendChild(capabilityApisJS);
    capabilityApisJS.loaded = new Promise((resolve) => {
      capabilityApisJS.onload = () => {
        resolve();
      };
    });
    const capabilityApisCSS = document.createElement('link');
    capabilityApisCSS.href = `${(config.secure ? 'https://' : 'http://') +
      config.host +
      (config.port ? `:${config.port}` : '') +
      prefix}/resources/autogenerated/qlik-styles.css`;
    capabilityApisCSS.type = 'text/css';
    capabilityApisCSS.rel = 'stylesheet';
    document.head.appendChild(capabilityApisCSS);
    capabilityApisCSS.loaded = new Promise((resolve) => {
      capabilityApisCSS.onload = () => {
        resolve();
      };
    });
    await Promise.all([capabilityApisJS.loaded, capabilityApisCSS.loaded]);
  } catch (error) {
    throw new Error(error);
  }
};

const qApp = async (config) => {
  try {
    await loadCapabilityApis(config);
    const prefix = config.prefix !== '' ? `/${config.prefix}/` : '/';
    window.require.config({
      baseUrl: `${(config.secure ? 'https://' : 'http://') +
        config.host +
        (config.port ? `:${config.port}` : '') +
        prefix}resources`,
      paths: {
        qlik: `${(config.secure ? 'https://' : 'http://') +
          config.host +
          (config.port ? `:${config.port}` : '') +
          prefix}resources/js/qlik`,
      },
      text: {
        useXhr(url, protocol, hostname, port) {
          // Override function for determining if XHR should be used.
          // url: the URL being requested
          // protocol: protocol of page text.js is running on
          // hostname: hostname of page text.js is running on
          // port: port of page text.js is running on
          // Use protocol, hostname, and port to compare against the url
          // being requested.
          // Return true or false. true means "use xhr", false means
          // "fetch the .js version of this resource".
          return true;
        },
      },
    });
    return new Promise((resolve) => {
      window.require(['js/qlik'], (qlik) => {
        console.log('Applying theme theme-sievo');
        qlik.theme.apply('theme-sievo').then(result => console.log('Theme apply result', result));

        const app = qlik.openApp(config.appId, { ...config, isSecure: config.secure, prefix });
        app.qlik = qlik;
        resolve(app);
      });
    });
  } catch (error) {
    throw new Error(error);
  }
};

export default qApp;
